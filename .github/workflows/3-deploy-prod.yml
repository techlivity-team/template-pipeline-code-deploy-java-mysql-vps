name: 3 Deploy to Production VPS

on:
  push:
    branches:
      - main

jobs:
  build:
    name: üß± Build app
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Instalar JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build com Maven
        working-directory: app
        run: mvn clean package -DskipTests

      - name: Renomear JAR gerado dinamicamente
        run: |
          JAR_FILE=$(find app/target -type f -name "*.jar" | head -n 1)
          echo "JAR encontrado: $JAR_FILE"
          cp "$JAR_FILE" app/target/app.jar
          echo "$(basename $JAR_FILE)" > jar_name.txt

      - name: Verificar se o JAR foi gerado
        run: ls -lh app/target/

      - name: Salvar artefato JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: app/target/app.jar

      - name: Salvar nome do JAR
        uses: actions/upload-artifact@v4
        with:
          name: jar-name
          path: jar_name.txt

  upload:
    name: üöÄ Enviar JAR para VPS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Baixar artefato JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar

      - name: Instalar sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Backup da vers√£o anterior
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            'if [ -f /home/ubuntu/production/app.jar ]; then \
               cp /home/ubuntu/production/app.jar /home/ubuntu/production/app-prev.jar; \
             fi'

      - name: Criar diret√≥rio de deploy e enviar JAR
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p /home/ubuntu/production"

          sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no \
            app.jar ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/ubuntu/production/app.jar

  shutdown:
    name: üõë Parar inst√¢ncia antiga
    runs-on: ubuntu-latest
    needs: upload

    steps:
      - name: Finalizar processo antigo
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            'PID=$(lsof -ti:8080); if [ -n "$PID" ]; then kill -9 $PID; fi'

  deploy:
    name: üö¶ Iniciar implanta√ß√£o de nova vers√£o
    runs-on: ubuntu-latest
    needs: shutdown

    steps:
      - name: Iniciar aplica√ß√£o
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
             'cd /home/ubuntu/production && \
             tmux new-session -d -s app-prod "export DATASOURCE_URL=${{ secrets.DATASOURCE_URL }} && \
                                              export DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }} && \
                                              export DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }} && \
                                              java -jar app.jar --spring.profiles.active=prod"'

  health-check:
    name: ü©∫ Verificar sa√∫de da aplica√ß√£o
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Esperar aplica√ß√£o subir
        run: sleep 15

      - name: Verificar status
        run: |
          HTTP_STATUS=$(curl -s -o /dev/null --max-time 10 -w "%{http_code}" http://${{ secrets.VPS_HOST }}:8080/actuator/health)
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "‚ùå Health check falhou com status: $HTTP_STATUS"
            exit 1
          else
            echo "‚úÖ Aplica√ß√£o no ar (200 OK)"
          fi

  rollback:
    name: ‚ôªÔ∏è Rollback de vers√£o se falhar
    runs-on: ubuntu-latest
    needs: health-check
    if: failure()

    steps:
      - name: Parar processo com falha
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            'PID=$(lsof -ti:8080); if [ -n "$PID" ]; then kill -9 $PID; fi'

      - name: Iniciar vers√£o anterior (rollback)
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            'tmux kill-session -t app-prod 2>/dev/null || true && \
             cd /home/ubuntu/production && \
             tmux new-session -d -s app-prod "export DATASOURCE_URL=${{ secrets.DATASOURCE_URL }} && \
                                              export DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }} && \
                                              export DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }} && \
                                              java -jar app-prev.jar --spring.profiles.active=prod"'

      - name: Aguardar vers√£o anterior subir
        run: sleep 15

      - name: Verificar status ap√≥s rollback
        run: |
          HTTP_STATUS=$(curl -s -o /dev/null --max-time 10 -w "%{http_code}" http://${{ secrets.VPS_HOST }}:8080/actuator/health)
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "‚ùå Rollback tamb√©m falhou com status: $HTTP_STATUS"
            exit 1
          else
            echo "‚úÖ Rollback funcionou! Aplica√ß√£o anterior no ar (200 OK)"
          fi

  logs:
    name: üìú Logs da aplica√ß√£o para debug
    runs-on: ubuntu-latest
    needs: [health-check, rollback]
    if: always()

    steps:
      - name: Ler logs da aplica√ß√£o
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
          ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
          'tail -n 200 /home/ubuntu/production/logs/app.log || echo "‚ö†Ô∏è Arquivo de log n√£o encontrado"'

