name: 3 Deploy to Production VPS

on:
  push:
    branches:
      - main

jobs:
  build:
    name: 🧱 Build app
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Instalar JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build com Maven
        working-directory: app
        run: mvn clean package -DskipTests

      - name: Renomear JAR gerado dinamicamente
        run: |
          JAR_FILE=$(find app/target -type f -name "*.jar" | head -n 1)
          echo "JAR encontrado: $JAR_FILE"
          cp "$JAR_FILE" app/target/app.jar
          echo "$(basename $JAR_FILE)" > jar_name.txt

      - name: Verificar se o JAR foi gerado
        run: ls -lh app/target/

      - name: Salvar artefato JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: app/target/app.jar

      - name: Salvar nome do JAR
        uses: actions/upload-artifact@v4
        with:
          name: jar-name
          path: jar_name.txt

  upload:
    name: 🚀 Enviar JAR para VPS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Baixar artefato JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar

      - name: Instalar sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Backup da versão anterior
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            'if [ -f /home/ubuntu/production/app.jar ]; then \
               cp /home/ubuntu/production/app.jar /home/ubuntu/production/app-prev.jar; \
             fi'

      - name: Criar diretório de deploy e enviar JAR
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p /home/ubuntu/production"

          sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no \
            app.jar ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/ubuntu/production/app.jar

  shutdown:
    name: 🛑 Parar instância antiga
    runs-on: ubuntu-latest
    needs: upload

    steps:
      - name: Finalizar processo antigo
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            'PID=$(lsof -ti:8080); if [ -n "$PID" ]; then kill -9 $PID; fi'

  deploy:
    name: 🚦 Iniciar implantação de nova versão
    runs-on: ubuntu-latest
    needs: shutdown

    steps:
      - name: Iniciar aplicação
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
          ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
          "cd /home/ubuntu/production && \
           tmux new-session -d -s app-prod \
           'java \
            -Dspring.datasource.url=${{ secrets.DATASOURCE_URL }} \
            -Dspring.datasource.username=${{ secrets.DATASOURCE_USERNAME }} \
            -Dspring.datasource.password=${{ secrets.DATASOURCE_PASSWORD }} \
            -jar app.jar --spring.profiles.active=prod'"

  health-check:
    name: 🩺 Verificar saúde da aplicação
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Esperar aplicação subir
        run: sleep 15

      - name: Verificar status
        run: |
          HTTP_STATUS=$(curl -s -o /dev/null --max-time 10 -w "%{http_code}" http://${{ secrets.VPS_HOST }}:8080/actuator/health)
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "❌ Health check falhou com status: $HTTP_STATUS"
            exit 1
          else
            echo "✅ Aplicação no ar (200 OK)"
          fi

  rollback:
    name: ♻️ Rollback de versão se falhar
    runs-on: ubuntu-latest
    needs: health-check
    if: failure()

    steps:
      - name: Parar processo com falha
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            'PID=$(lsof -ti:8080); if [ -n "$PID" ]; then kill -9 $PID; fi'

      - name: Iniciar versão anterior (rollback)
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "tmux kill-session -t app-prod 2>/dev/null || true && \
            cd /home/ubuntu/production && \
            tmux new-session -d -s app-prod \
            'java \
            -Dspring.datasource.url=${{ secrets.DATASOURCE_URL }} \
            -Dspring.datasource.username=${{ secrets.DATASOURCE_USERNAME }} \
            -Dspring.datasource.password=${{ secrets.DATASOURCE_PASSWORD }} \
            -jar app-prev.jar --spring.profiles.active=prod'"

      - name: Aguardar versão anterior subir
        run: sleep 15

      - name: Verificar status após rollback
        run: |
          HTTP_STATUS=$(curl -s -o /dev/null --max-time 10 -w "%{http_code}" http://${{ secrets.VPS_HOST }}:8080/actuator/health)
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "❌ Rollback também falhou com status: $HTTP_STATUS"
            exit 1
          else
            echo "✅ Rollback funcionou! Aplicação anterior no ar (200 OK)"
          fi

  logs:
    name: 📜 Logs da aplicação para debug
    runs-on: ubuntu-latest
    needs: [health-check, rollback]
    if: always()

    steps:
      - name: Ler logs da aplicação
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
          ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
          'tail -n 200 /home/ubuntu/production/logs/app.log || echo "⚠️ Arquivo de log não encontrado"'

  create-release:
    name: 📦 Criar Release
    runs-on: ubuntu-latest
    needs: health-check

    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # necessário para obter histórico de tags

      - name: Set up Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Get version from pom.xml
        id: version
        run: |
          version=$(xmllint --xpath "/*[local-name()='project']/*[local-name()='version']/text()" pom.xml)
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "::set-output name=version::$version"

      - name: Get latest tag
        id: lasttag
        run: |
          tag=$(git describe --tags --abbrev=0 || echo "")
          echo "LAST_TAG=$tag" >> $GITHUB_ENV
          echo "::set-output name=lasttag::$tag"

      - name: Get changelog
        id: changelog
        run: |
          if [ -z "${{ steps.lasttag.outputs.lasttag }}" ]; then
            log=$(git log --pretty=format:"* %s (%an)" --no-merges)
          else
            log=$(git log ${{ steps.lasttag.outputs.lasttag }}..HEAD --pretty=format:"* %s (%an)" --no-merges)
          fi
          echo "$log" > changelog.txt
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$log" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: v${{ env.VERSION }}
          body_path: changelog.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
