name: 3 Deploy to Production VPS

on:
  push:
    branches:
      - main

jobs:
  build:
    name: üß± Build app
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Instalar JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build com Maven
        working-directory: app
        run: mvn clean package -DskipTests

      - name: Criar link simb√≥lico app.jar
        run: |
          JAR_FILE=$(find app/target -type f -name "*.jar" | head -n 1)
          ln -s "$JAR_FILE" app/target/app.jar

      - name: Salvar nome do JAR em um arquivo
        run: |
          JAR_FILE=$(find app/target -type f -name "*.jar" | head -n 1)
          echo $(basename "$JAR_FILE") > jar_name.txt

      - name: Upload nome do JAR
        uses: actions/upload-artifact@v4
        with:
          name: jar-name
          path: jar_name.txt

      - name: Verificar se o JAR foi gerado
        run: ls -lh app/target/

      - name: Salvar artefato
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: app/target/app.jar

  upload:
    name: üöÄ Enviar JAR para VPS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Baixar artefato
        uses: actions/download-artifact@v4
        with:
          name: app-jar

      - name: Verificar conte√∫do do diret√≥rio atual
        run: ls -lh

      - name: Instalar sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Backup da vers√£o anterior
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" \
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
          'mkdir -p /home/ubuntu/production/backups && \
           if [ -f /home/ubuntu/production/app.jar ]; then \
             cp /home/ubuntu/production/app.jar /home/ubuntu/production/backups/app-$(date +%Y%m%d%H%M%S).jar; \
           fi'

      - name: Limpar backups antigos (10+ dias)
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" \
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
          'find /home/ubuntu/production/backups/ -type f -mtime +10 -delete'

      - name: Copiar JAR para VPS
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" \
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
          "mkdir -p /home/ubuntu/production"

          sshpass -p "${{ secrets.VPS_PASSWORD }}" \
          scp -o StrictHostKeyChecking=no \
          app.jar \
          ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/ubuntu/production/app.jar

  shutdown:
    name: üõë Parar inst√¢ncia antiga
    runs-on: ubuntu-latest
    needs: upload

    steps:
      - name: Finalizar processo antigo
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            'PID=$(lsof -ti:8080); if [ -n "$PID" ]; then kill -9 $PID; fi'

  deploy:
    name: üö¶ Iniciar aplica√ß√£o via tmux
    runs-on: ubuntu-latest
    needs: shutdown

    steps:
      - name: Baixar nome do JAR
        uses: actions/download-artifact@v4
        with:
          name: jar-name

      - name: Carregar nome do JAR
        id: jar
        run: echo "JAR_NAME=$(cat jar_name.txt)" >> $GITHUB_ENV

      - name: Deploy na VPS via script remoto
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
          ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
            echo "#!/bin/bash
            set -e

            JAR_NAME=\"${{ env.JAR_NAME }}\"

            echo \"\u27a1\ufe0f Iniciando rollback para vers√£o anterior...\"
            cd /home/ubuntu/production || exit 1

            echo \"\ud83d\ude15 Encerrando sess√£o tmux anterior (se existir)...\"
            tmux kill-session -t app-prod 2>/dev/null || true

            if [ -f \"app.jar\" ]; then
              echo \"\ud83d\udd01 Restaurando vers√£o anterior do JAR...\"
              cp \"app.jar\" \"backups/$JAR_NAME.previous\"
            fi

            echo \"\ud83d\ude80 Iniciando nova sess√£o tmux...\"
            tmux new-session -d -s app-prod \"
              export DATASOURCE_URL='${{ secrets.DATASOURCE_URL }}';
              export DATASOURCE_USERNAME='${{ secrets.DATASOURCE_USERNAME }}';
              export DATASOURCE_PASSWORD='${{ secrets.DATASOURCE_PASSWORD }}';
              java -jar app.jar --spring.profiles.active=prod
            \"

            echo \"\ud83d\udcdd Registrando log de rollback...\"
            echo \"$(date) - Implantac√£o realizada com $JAR_NAME e hash ${{ github.sha }}\" >> /home/ubuntu/production/deploy.log

            echo \"\ud83d\udccb Capturando log do tmux...\"
            mkdir -p /home/ubuntu/production/logs
            tmux capture-pane -pt app-prod && tmux save-buffer /home/ubuntu/production/logs/last_tmux.log && tmux delete-buffer
            " > /home/ubuntu/production/deploy_script.sh

            chmod +x /home/ubuntu/production/deploy_script.sh
            bash /home/ubuntu/production/deploy_script.sh
          '

  health-check:
    name: ü©∫ Verificar aplica√ß√£o
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Esperar aplica√ß√£o subir
        run: sleep 15

      - name: Verificar status ou disparar rollback
        run: |
          HTTP_STATUS=$(curl -s -o /dev/null --max-time 10 -w "%{http_code}" http://${{ secrets.VPS_HOST }}:8080/actuator/health)
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "‚ùå Health check falhou com status: $HTTP_STATUS"

            curl -X POST https://api.github.com/repos/${{ github.repository }}/actions/workflows/rollback.yml/dispatches \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -d '{"ref":"main"}'

            exit 1
          else
            echo "‚úÖ Aplica√ß√£o no ar (200 OK)"
          fi

  logs:
    name: üìú Logs
    runs-on: ubuntu-latest
    needs: health-check

    steps:
      - name: Ler logs da aplica√ß√£o
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
          ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
          'tail -n 200 /home/ubuntu/production/logs/app.log || echo "‚ö†Ô∏è Arquivo de log n√£o encontrado"'